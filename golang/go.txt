
go语言 -- 严格的语法格式

1.public变量必须以大写字母开头, private变量必须以小写字母开头.(不用使用public和private关键字)
注: Go语言中符号的可访问性是包一级的而不是类型一级的

2.{}必须为以下格式
	if expression {
		...
	}

3.错误处理 -- defer、panic和recover
	3.1 defer:语句的含义是不管程序是否出现异常，均在函数退出时自动执行相关代码
	3.1.1
	f, err := os.Open(filename)
	if err != nil {
		log.Println("Open file failed:", err)
		return
	}
	defer f.Close()
	... // 操作已经打开的f文件

	3.1.2
	defer func() {
		// 做你复杂的清理工作
	} ()

	3.1.3 defer语句的调用是遵照先进后出的原则，即最后一个defer语句将最先被执行

	3.2 panic:
	3.3 recover:

4.1函数允许返回多个值。
	func getName()(firstName, middleName, lastName, nickName string){
		return "May", "M", "Chen", "Babe"
	}

	func getName()(firstName, middleName, lastName, nickName string){
		firstName = "May"
		middleName = "M"
		lastName = "Chen"
		nickName = "Babe"
		return
	}

	fn, mn, ln, nn := getName()
	_, _, lastName, _ := getName() // 用下划线作为占位符来忽略其他不关心的返回值

4.2大多数函数的最后一个返回值会为error类型(一个系统内置的interface). 如下：
	type error interface {
		Error() string
	}

	type ReadWriter interface {
		Read(buf [] byte) (n int, err error)
		Write(buf [] byte) (n int, err error)
		Close() error
	}

5.不支持函数和操作符重载

6.支持类、类成员方法、类的组合，但反对继承，反对虚函数（virtual function）和虚函数重载
	type Foo struct {
		Base
		...
	}
	func (foo *Foo) Bar() {
		...
	}

7.没有构造函数（constructor）和析构函数（destructor）

8.接口（interface）
	type Foo struct { // Go 文法
		...
	}
	var foo IFoo = new(Foo)
	只要Foo实现了接口IFoo要求的所有方法，就实现了该接口，可以进行赋值

9.为了引用另一个包中的接口而导入这个包的做法是不被推荐的

10.接受了函数式编程的一些想法，支持匿名函数与闭包, 并接受了以Erlang语言为代表的面向消息编程思想，
支持goroutine和通道，并推荐使用消息而不是共享内存来进行并发编程

11.通过在函数调用前使用关键字go，我们即可让该函数以goroutine方式执行

12.数组
	values := [] int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

13.不得包含在源代码文件中没有用到的包，否则Go编译器会报编译错误

14.channel -- 由两个goroutine进行并行的累加计算，待这两个计算过程都完成后打印计算结果
	package main
	import "fmt"
	func sum(values [] int, resultChan chan int) {
		sum := 0
		for _, value := range values {
			sum += value
		}
		resultChan <- sum // 将计算结果发送到channel中
	}
	func main() {
		values := [] int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
		resultChan := make(chan int, 2)
		go sum(values[:len(values)/2], resultChan)
		go sum(values[len(values)/2:], resultChan)
		sum1, sum2 := <-resultChan, <-resultChan // 接收结果
		fmt.Println("Result:", sum1, sum2, sum1 + sum2)
	}

15.反射:
	实现了反射的大部分功能
	最常见的使用场景是做对象的序列化
	但无法做到像Java那样通过类型字符串创建对象实例. 
	package main
	import (
		"fmt"
		"reflect"
	)
	type Bird struct {
		Name string
		LifeExpectance int
	}
	func (b *Bird) Fly() {
		fmt.Println("I am flying...")
	}
	func main() {
		sparrow := &Bird{"Sparrow", 3}
		s := reflect.ValueOf(sparrow).Elem()
		typeOfT := s.Type()
		for i := 0; i < s.NumField(); i++ {
			f := s.Field(i)
			fmt.Printf("%d: %s %s = %v\n", i, typeOfT.Field(i).Name, f.Type(),
			f.Interface())
		}
	}
	该程序的输出结果为：
	0: Name string = Sparrow
	1: LifeExpectance int = 3

16.在Go代码中，可以按Cgo的特定语法混合编写C语言代码，然后Cgo工具可以将这些混合的C
代码提取并生成对于C功能的调用包装代码(http://studygolang.com/articles/1970)
	package main

	// #include 
	// #include 
	/*
	void print(char *str) {
		printf("%s\n", str);
	}
	*/
	import "C"
	import "unsafe"

	func main() {
		s := "Hello Cgo"
		cs := C.CString(s)
		C.print(cs)
		C.free(unsafe.Pointer(cs))
	}

	与"正常"Go代码相比，上述代码有几处"特殊"的地方：
	1) 在开头的注释中出现了C头文件的include字样
	2) 在注释中定义了C函数print
	3) import的一个名为C的"包"
	4) 在main函数中居然调用了上述的那个C函数-print

17.要生成Go可执行程序，必须建立一个名字为main的包，并且在该包中包含一个叫main()的函数
	a.该函数是Go可执行程序的执行起点 
	b.该函数不能带参数，也不能定义返回值
	c.命令行传入的参数在os.Args变量中保存
	d.如果需要支持命令行开关，可使用flag包

18.代码注释与C++保持一致
	/*
	块注释
	*/

	// 行注释

19.问题追踪和调试
	a.打印日志 -- fmt.Println()和fmt.Printf()
	fval := 110.48
	ival := 200
	sval := "This is a string. "
	fmt.Println("The value of fval is", fval)
	fmt.Printf("fval=%f, ival=%d, sval=%s\n", fval, ival, sval)
	fmt.Printf("fval=%v, ival=%v, sval=%v\n", fval, ival, sval)

	输出结果为：
	The value of fval is 100.48
	fval=100.48, ival=200, sval=This is a string.
	fval=100.48, ival=200, sval=This is a string.

	b.GDB调试 -- gdb *.exe
	Go语言编译的二进制程序直接支持GDB调试

	注:Go编译器生成的调试信息格式为DWARFv3，只要版本高于7.1的GDB应该都支持它

20.变量声明 -- 对于纯粹的变量声明，Go语言引入了关键字var
	var v1 int
	var v2 string
	var v3 [10]int				// 数组
	var v4 []int				// 数组切片
	var v5 struct {
		f int
	}
	var v6 *int					// 指针
	var v7 map[string]int		// map，key为string类型，value为int类型
	var v8 func(a int) int

21.var关键字的另一种用法是可以将若干个需要声明的变量放置在一起
	var (
		v1 int
		v2 string
	)

22.对于声明变量时需要进行初始化的场景，var关键字可以保留，但不再是必要的元素
	var v1 int = 10				// 正确的使用方式1
	var v2 = 10					// 正确的使用方式2，编译器可以自动推导出v2的类型
	v3 := 10					// 正确的使用方式3，编译器可以自动推导出v3的类型

	注: ":=" -- 用于明确表达同时进行变量声明和初始化的工作(出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误)

23.常量定义
	-12
	3.14159265358979323846		// 浮点类型的常量
	3.2+12i						// 复数类型的常量
	true						// 布尔类型的常量
	"foo"						// 字符串常量

	const Pi float64 = 3.14159265358979323846
	const zero = 0.0			// 无类型浮点常量
	const (
		size int64 = 1024
		eof = -1				// 无类型整型常量
	)
	const u, v float32 = 0, 3	// u = 0.0, v = 3.0，常量的多重赋值
	const a, b, c = 3, 4, "foo"	// a = 3, b = 4, c = "foo", 无类型整型和字符串常量

	注:
	a.Go的常量定义可以限定常量类型，但不是必需的
	b.常量定义的右值也可以是一个在编译期运算的常量表达式，比如: const mask = 1 << 3

24.iota -- 在每一个const关键字出现时被重置为0，然后在下一个const出现之前，每出现一次iota，其所代表的数字会自动增1
	const (						// iota被重设为0
		c0 = iota				// c0 == 0
		c1 = iota				// c1 == 1
		c2 = iota				// c2 == 2
	)

	如果两个const的赋值语句的表达式是一样的，那么可以省略后一个赋值表达式
	const (						// iota被重设为0
		c0 = iota				// c0 == 0
		c1						// c1 == 1
		c2						// c2 == 2
	)

25.枚举 -- 使用const定义(没有enum关键字)

26.数据类型
	a.内置的基础类型
	 布尔类型：bool
	 整型：int8、byte、int16、int、uint、uintptr等
	 浮点类型：float32、float64
	 复数类型：complex64、complex128
	 字符串：string
	 字符类型：rune
	 错误类型：error

	b.复合类型
	 指针（pointer）
	 数组（array）
	 切片（slice）
	 字典（map）
	 通道（chan）
	 结构体（struct）
	 接口（interface）

	注:
	a.对于常规的开发来说，用int和uint就可以了，没必要用int8之类明确指定长度的类型，以免导致移植困难
	b.int和int32在Go语言里被认为是两种不同的类型, 编译器也不会帮你自动做类型转换, 需做强制类型转换

27.布尔类型不能接受其他类型的赋值，不支持自动或强制的类型转换

28.运算符同c/c++
	a. +、、*、/和%
	b. >、<、==、>=、<=和!=

29.两个不同类型的整型数不能直接比较.
比如int8类型的数和int类型的数不能直接比较，但各种类型的整型变量都可以直接与字面常量（literal）进行比较

30.位运算
	x << y		左移	124 << 2	// 结果为496
	x >> y		右移	124 >> 2	// 结果为31
	x ^ y		异或	124 ^ 2		// 结果为126
	x & y		与		124 & 2		// 结果为0
	x | y		或		124 | 2		// 结果为126
	^x			取反	^2			// 结果为3

31.浮点型(float32和float64)
	a. fvalue2 := 12.0 // 自动设为float64; 如果不加小数点，fvalue2会被推导为整型而不是浮点型
	b. 判等(不能直接使用==)
	import "math"
	// p为用户自定义的比较精度，比如0.00001
	func IsEqual(f1, f2, p float64) bool {
		return math.Fdim(f1, f2) < p
	}

32.复数类型
	a.定义
	var value1 complex64			// 由2个float32构成的复数类型
	value1	=	3.2 + 12i
	value2	:=	3.2 + 12i			// value2是complex128类型
	value3	:=	complex(3.2, 12)	// value3结果同 value2

	b.方法 -- 复数z = complex(x, y)
	通过内置函数real(z)获得该复数的实部，也就是x，通过imag(z)获得该复数的虚部，也就是y

33.Go编译器支持UTF-8的源代码文件格式
	-- 如果你的Go代码需要包含非ANSI字符，保存源文件时请注意编码格式必须选择UTF-8

34.字符串遍历
	a.字节数组方式
	str := "Hello,世界"
	n := len(str)
	for i := 0; i < n; i++ {
		ch := str[i]				// 依据下标取字符串中的字符，类型为byte
		fmt.Println(i, ch)
	}

	b.以Unicode字符遍历
	str := "Hello,世界"
	for i, ch := range str {
		fmt.Println(i, ch)			//ch的类型为rune
	}

	注:在Go语言中支持两个字符类型 
	a.一个是byte(实际上是uint8的别名), 代表UTF-8字符串的单个字节的值
	b.一个是rune，代表单个Unicode字符
	c.Go语言的多数API都假设字符串为UTF-8编码。尽管Unicode字符在标准库中有支持，但实际上较少使用

35.数组
	a.定义
	[32]byte						// 长度为32的数组，每个元素为一个字节
	[2*N] struct { x, y int32 }		// 复杂类型数组
	[1000]*float64					// 指针数组
	[3][5]int						// 二维数组
	[2][2][2]float64				// 等同于[2]([2]([2]float64))

	b.方法
	len(): 获取长度
	遍历:
	for i := 0; i < len(array); i++ {
		fmt.Println("Element", i, "of array is", array[i])
	}

	for i, v := range array {
		fmt.Println("Array element[", i, "]=", v)
	}

	c.在Go语言中数组是一个值类型(作为函数参数时会产生复制, 因此在函数体中无法修改传入的数组的内容)

36.值类型 -- 所有的值类型变量在赋值和作为参数传递时都将产生一次复制动作

37.数组切片 -- 创建
	a.基于数组(或数组切片)
	// 先定义一个数组
	var myArray [10]int = [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	// 基于数组创建一个数组切片
	var mySlice []int = myArray[:5]
	// 基于数组切片
	// -- 选择的mySlice元素范围甚至可以超过所包含的元素个数, 但不超过其存储能力(即cap()返回的值), 超出部分补0
	newSlice := mySlice[:3]

	b.直接创建
	创建一个初始元素个数为5的数组切片，元素初始值为0：
	mySlice1 := make([]int, 5)
	创建一个初始元素个数为5的数组切片，元素初始值为0，并预留10个元素的存储空间：
	mySlice2 := make([]int, 5, 10)
	直接创建并初始化包含5个元素的数组切片：
	mySlice3 := []int{1, 2, 3, 4, 5}

38.数组切片 -- len()/cap()/copy()
	mySlice := make([]int, 5, 10)					// 
	fmt.Println("len(mySlice):", len(mySlice))		// 返回数组切片中当前所存储的元素个数
	fmt.Println("cap(mySlice):", cap(mySlice))		// 返回数组切片分配的空间大小

	mySlice = append(mySlice, 1, 2, 3)				// 从尾端给mySlice加上3个元素，从而生成一个新的数组切片
	mySlice = append(mySlice, mySlice2...)			// 给mySlice后面添加另一个数组切片

	// copy() -- 如果加入的两个数组切片不一样大，就会按其中较小的那个数组切片的元素个数进行复制
	slice1 := []int{1, 2, 3, 4, 5}
	slice2 := []int{5, 4, 3}
	copy(slice2, slice1)							// 只会复制slice1的前3个元素到slice2中
	copy(slice1, slice2)							// 只会复制slice2的3个元素到slice1的前3个位置

	// 切片是不可改变的(immutable)
	func main() {
	 s0 := make([]int, 2, 10)
	 s1 := append(s0, 2)
	 s2 := append(s0, 3)
	 fmt.Printf("Element: %d %d\n", s1[2], s2[2])	// 3 3
	 s0 = []int{0, 1}
	 s1 = append(s0, 2)
	 s2 = append(s0, 3)
	 fmt.Printf("Element: %d %d\n", s1[2], s2[2])	// 2 3
	}

39.map -- 例
	package main
	import "fmt"

	// PersonInfo是一个包含个人详细信息的类型
	type PersonInfo struct {
		ID string
		Name string
		Address string
	}

	func main() {
		var personDB map[string] PersonInfo
		personDB = make(map[string] PersonInfo)
		// 往这个map里插入几条数据
		personDB["12345"] = PersonInfo{"12345", "Tom", "Room 203,..."}
		personDB["1"] = PersonInfo{"1", "Jack", "Room 101,..."}
		// 从这个map查找键为"1234"的信息
		person, ok := personDB["1234"]
		// ok是一个返回的bool型，返回true表示找到了对应的数据
		if ok {
			fmt.Println("Found person", person.Name, "with ID 1234.")
		} else {
			fmt.Println("Did not find person with ID 1234.")
		}
	}

40.map -- 方法
	var myMap map[string] PersonInfo				// 声明
	myMap = make(map[string] PersonInfo)			// 键类型为string、值类型为PersonInfo的map
	myMap = make(map[string] PersonInfo, 100)		// 初始存储能力为100的map
	myMap = map[string] PersonInfo{					// 创建并初始化map
		"1234": PersonInfo{"1", "Jack", "Room 101,..."},
	}

	myMap["1234"] = PersonInfo{"1", "Jack", "Room 101,..."}		// 元素赋值
	delete(myMap, "1234")							// 元素删除

41.流程控制
	选择，即根据条件跳转到不同的执行序列；
	循环，即根据条件反复执行某个序列，当然每一次循环执行的输入输出可能会发生变化；
	跳转，即根据条件返回到某执行序列。

Go语言支持如下的几种流程控制语句：
	条件语句，对应的关键字为if、else和else if；
	选择语句，对应的关键字为switch、case和select（将在介绍channel的时候细说）；
	循环语句，对应的关键字为for和range；
	跳转语句，对应的关键字为goto。

在具体的应用场景中，为了满足更丰富的控制需求，Go语言还添加了如下关键字：break、continue和fallthrough

41.1 条件语句 -- 对应的关键字为if、else和else if
	条件语句不需要使用括号将条件包含起来()
	无论语句体内有几条语句，花括号{}都是必须存在的
	左花括号{必须与if或者else处于同一行
	在if之后，条件语句之前，可以添加变量初始化语句，使用;间隔
	在有返回值的函数中，不允许将“最终的”return语句包含在if...else...结构中，否则会编译失败

	编译失败的案例如下 -- 这个好像可以编译通过
	func example(x int) int {
		if x == 0 {
			return 5
		} else {
			return x
		}
	}

41.2 选择语句
	switch i {
		case 0:
			fmt.Printf("0")
		case 1:
			fmt.Printf("1")
		case 2:
			fallthrough
		case 3:
			fmt.Printf("3")
		case 4, 5, 6:
			fmt.Printf("4, 5, 6")
		default:
			fmt.Printf("Default")
	}

	运行上面的案例，将会得到如下结果：
	 i = 0时，输出0；
	 i = 1时，输出1；
	 i = 2时，输出3；
	 i = 3时，输出3；
	 i = 4时，输出4, 5, 6；
	 i = 5时，输出4, 5, 6；
	 i = 6时，输出4, 5, 6；
	 i = 其他任意值时，输出Default。

	比较有意思的是，switch后面的表达式甚至不是必需的，比如下面的例子：
	switch {
		case 0 <= Num && Num <= 3:
			fmt.Printf("0-3")
		case 4 <= Num && Num <= 6:
			fmt.Printf("4-6")
		case 7 <= Num && Num <= 9:
			fmt.Printf("7-9")
	}

	在使用switch结构时，我们需要注意以下几点：
	 左花括号{必须与switch处于同一行
	 条件表达式不限制为常量或者整数
	 单个case中，可以出现多个结果选项
	 与C语言等规则相反，Go语言不需要用break来明确退出一个case
	 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case
	 可以不设定switch之后的条件表达式，在此种情况下，整个switch结构与多个if...else...的逻辑作用等同

41.3 循环语句 -- 只支持for关键字，而不支持while和do-while结构
	sum := 0

	for i := 0; i < 10; i++ {
		sum += i
	}

	for {
		sum++
		if sum > 100 {
			break
		}
	}

	a := []int{1, 2, 3, 4, 5, 6}
	for i, j := 0, len(a) – 1; i < j; i, j = i + 1, j – 1 {
		a[i], a[j] = a[j], a[i]
	}

	for j := 0; j < 5; j++ {
		for i := 0; i < 10; i++ {
			if i > 5 {
				break JLoop
			}
			fmt.Println(i)
		}
	}
	JLoop:
	// ...
	break语句终止的是JLoop标签处的外层循环

	注: 
	a.在条件表达式中也支持多重赋值, 但不支持以逗号为间隔的多个赋值语句
	b.Go语言的for循环同样支持continue和break来控制循环，但是它提供了一个更高级的break，
	可以选择中断哪一个循环
		
41.4 跳转语句 -- goto
	func myfunc() {
		i := 0
		HERE:
		fmt.Println(i)
		i++
		if i < 10 {
			goto HERE
		}
	}

42.小写字母开头的函数只在本包内可见，大写字母开头的函数才能被其他包使用(因为条目1)

43.不定参数 -- 形如...type格式的类型只能作为函数的参数类型存在，并且必须是最后一个参数
	a.定义
	func myfunc(args ...int) {
		for _, arg := range args {
			fmt.Println(arg)
		}
	}

	func MyPrintf(args ...interface{}) {	// 如果你希望传任意类型，可以指定类型为interface{}
		for _, arg := range args {
			switch arg.(type) {
				case int:
					fmt.Println(arg, "is an int value.")
				case string:
					fmt.Println(arg, "is a string value.")
				case int64:
					fmt.Println(arg, "is an int64 value.")
				default:
					fmt.Println(arg, "is an unknown type.")
			}
		}
	}

	b.传递
	func myfunc(args ...int) {
		// 按原样传递
		myfunc3(args...)
		// 传递片段，实际上任意的int slice都可以传进去
		myfunc3(args[1:]...)
	}

44.匿名函数
	f := func(x, y int) int {
		return x + y
	}

	func(ch chan int) {
		ch <- ACK
	} (reply_chan)								// 花括号后直接跟参数列表表示函数调用

45.为类型添加方法
	type Integer int
	func (a Integer) Less(b Integer) bool {
		return a < b
	}

	func (a *Integer) Add(b Integer) {			// 只有需要修改对象的时候，才必须用指针
		*a += b
	}

46.Go语言中的大多数类型都基于值语义，包括：
 基本类型，如byte、int、bool、float32、float64和string等；
 复合类型，如数组（array）、结构体（struct）和指针（pointer）等。

47.引用语义
 数组切片：指向数组（array）的一个区间。
 map：极其常见的数据结构，提供键值查询能力。
 channel：执行体（goroutine）间的通信设施。
 接口（interface）：对一组满足某个契约的类型的抽象。

48.创建并初始化Rect类型的对象实例
	type Rect struct {
		x, y float64
		width, height float64
	}

	rect1 := new(Rect)
	rect2 := &Rect{}
	rect3 := &Rect{0, 0, 100, 200}
	rect4 := &Rect{width: 100, height: 200}

49.匿名组合
	type Base struct {
		Name string
	}
	func (base *Base) Foo() { ... }
	func (base *Base) Bar() { ... }

	type Foo struct {
		Base
		...
	}
	func (foo *Foo) Bar() {
		foo.Base.Bar()
		...
	}

	type Job struct {
		Command string
		*log.Logger
	}

	func (job *Job)Start() {
		job.Log("starting now...")				// 很像C++的operter->()吧:)
		... // 做一些事情
		job.Log("started.")
	}

	注:
	type Y struct {
		*Logger
		Name string
		*log.Logger
	}											// 这里会有问题
	匿名组合类型相当于以其类型名称(去掉包名部分)作为成员变量的名字。
	按此规则，Y类型中就相当于存在两个名为Logger的成员

50.接口赋值 -- Writer为接口类, 其方法列表是接口类two.IStream的子集, File类实现了two.IStream的所有方法
	var file1 two.IStream = new(File)
	var file4 Writer = file1

	var file1 Writer = ...
	if file5, ok := file1.(two.IStream); ok {	// file5为接口two.IStream的实例
		...
	}

	var file1 Writer = ...
	if file6, ok := file1.(*File); ok {			// 判断file1接口指向的对象实例是否是*File类型
		...
	}

51.类型查询
	var v1 interface{} = ...
	switch v := v1.(type) {
		case int: // 现在v的类型是int
		case string: // 现在v的类型是string
		...
	}

52.channel
	a.例
	package main
	import "fmt"

	func Count(ch chan int) {
		ch <- 1
		fmt.Println("Counting")
	}

	func main() {
		chs := make([]chan int， 10)
		for i := 0; i < 10; i++ {
			chs[i] = make(chan int)
			go Count(chs[i])
		}
		for _, ch := range(chs) {
			<-ch
		}
	}

	b.创建了一个大小为1024的int类型channel
		c := make(chan int, 1024)

	c.单向channel
	var ch1 chan int							// ch1是一个正常的channel，不是单向的
	var ch2 chan<- float64						// ch2是单向channel，只用于写float64数据
	var ch3 <-chan int							// ch3是单向channel，只用于读取int数据

	ch4 := make(chan int)
	ch5 := <-chan int(ch4)						// ch5就是一个单向的读取channel
	ch6 := chan<- int(ch4)						// ch6 是一个单向的写入channel

	d.关闭channel -- close(ch)
	e.读取channel -- x, ok := <-ch				// ok为false则表示ch已经被关闭

53.在语言级别支持select关键字
	select {
		case <-chan1:
		// 如果chan1成功读到数据，则进行该case处理语句
		case chan2 <- 1:
		// 如果成功向chan2写入数据，则进行该case处理语句
		default:
		// 如果上面都没有成功，则进入default处理流程
	}

54.超时机制 -- 没有提供直接的超时处理机制，但我们可以利用select机制
	// 首先，我们实现并执行一个匿名的超时等待函数
	timeout := make(chan bool, 1)
	go func() {
		time.Sleep(1e9) // 等待1秒钟
		timeout <- true
	}()

	// 然后我们把timeout这个channel利用起来
	select {
		case <-ch:
		// 从ch中读取到数据
		case <-timeout:
		// 一直没有从ch中读取到数据，但从timeout中读取到了数据
	}

55.管道实现
	type PipeData struct {
		value int
		handler func(int) int
		next chan int
	}

	func handle(queue chan *PipeData) {
		for data := range queue {
			data.next <- data.handler(data.value)
		}
	}

56.多核并行化
	type Vector []float64

	// 分配给每个CPU的计算任务
	func (v Vector) DoSome(i, n int, u Vector, c chan int) {
		for ; i < n; i++ {
			v[i] += u.Op(v[i])
		}
		c <- 1 // 发信号告诉任务管理者我已经计算完成了
	}

	const NCPU = 16 // 假设总共有16核

	func (v Vector) DoAll(u Vector) {

		c := make(chan int, NCPU) // 用于接收每个CPU的任务完成信号
		for i := 0; i < NCPU; i++ {
			go v.DoSome(i*len(v)/NCPU, (i+1)*len(v)/NCPU, u, c)
		}

		// 等待所有CPU的任务完成
		for i := 0; i < NCPU; i++ {
			<-c // 获取到一个数据，表示一个CPU计算完成了
		}
		// 到这里表示所有计算已经结束
	}
	
	注: 
	a.在Go语言升级到默认支持多CPU的某个版本之前，我们可以先通过设置环境变量
	GOMAXPROCS的值来控制使用多少个CPU核心. 直接设置环境变量GOMAXPROCS的值，
	或者在代码中启动goroutine之前先调用以下这个语句 -- runtime.GOMAXPROCS(16)
	b.runtime.NumCPU() -- 获取核心数
	c.runtime.Gosched() -- 出让时间片

57.锁 -- sync.Mutex和sync.RWMutex
	var l sync.Mutex
	func foo() {
		l.Lock()
		defer l.Unlock()
		//...
	}

58.全局唯一性操作 -- 以保证在全局范围内只调用指定的函数一次
	var a string
	var once sync.Once
	func setup() {
		a = "hello, world"
	}
	func doprint() {
		once.Do(setup)
		print(a)
	}
	func twoprint() {
		go doprint()
		go doprint()
	}

	注: 所有其他goroutine在调用到此语句时，将会先被阻塞，直至全局唯一的once.Do()调用结束后才继续

59.Socket 编程
	a.func Dial(net, addr string) (Conn, error)
		TCP链接：
		conn, err := net.Dial("tcp", "192.168.0.10:2100")
		UDP链接：
		conn, err := net.Dial("udp", "192.168.0.12:975")
		ICMP链接（使用协议名称）：
		conn, err := net.Dial("ip4:icmp", "www.baidu.com")
		ICMP链接（使用协议编号）：
		conn, err := net.Dial("ip4:1", "10.0.0.3")

		支持如下几种网络协议："tcp"、"tcp4"（仅限IPv4）、"tcp6"（仅限IPv6）、"udp"、"udp4"（仅限IPv4）、
		"udp6"（仅限IPv6）、"ip"、"ip4"（仅限IPv4）和"ip6"（仅限IPv6）

	b.发送数据时，使用conn的Write()成员方法，接收数据时使用Read()方法。

60.rpc
	a.服务器端:
		package server

		type Args struct {
			A, B int
		}
		type Quotient struct {
			Quo, Rem int
		}
		type Arith int
		func (t *Arith) Multiply(args *Args, reply *int) error {
			*reply = args.A * args.B
			return nil
		}
		func (t *Arith) Divide(args *Args, quo *Quotient) error {
			if args.B == 0 {
				return errors.New("divide by zero")
			}
			quo.Quo = args.A / args.B
			quo.Rem = args.A % args.B
			return nil
		}
		注册服务对象并开启该 RPC 服务的代码如下：
		arith := new(Arith)
		rpc.Register(arith)
		rpc.HandleHTTP()
		l, e := net.Listen("tcp", ":1234")
		if e != nil {
			log.Fatal("listen error:", e)
		}
		go http.Serve(l, nil)

	b.与RPC服务端建立连接
		client, err := rpc.DialHTTP("tcp", serverAddress + ":1234")
		if err != nil {
			log.Fatal("dialing:", err)
		}

	c.同步调用
		args := &server.Args{7,8}
		var reply int
		err = client.Call("Arith.Multiply", args, &reply)
		if err != nil {
			log.Fatal("arith error:", err)
		}
		fmt.Printf("Arith: %d*%d=%d", args.A, args.B, reply)

	d.异步调用
		quotient := new(Quotient)
		divCall := client.Go("Arith.Divide", args, &quotient, nil)
		replyCall := <-divCall.Done

61.Gob是Go的一个序列化数据结构(是二进制编码的数据流)的编码解码工具 -- 无法跨语言使用

62.Go语言内建对JSON的支持 -- 编码和解码时，遵循RFC4627协议标准
	a.func Marshal(v interface{}) ([]byte, error) -- 可以对一组数据进行JSON格式的编码
	b.func Unmarshal(data []byte, v interface{}) error -- 将JSON格式的文本解码为Go里边预期的数据结构

	注: 
	a.大多数数据类型都可以转化为有效的JSON文本，但channel、complex和函数这几种类型除外
	b.如果发现被序列化对象实现了json.Marshaler接口且包含有效的值，Marshal()就会调用其
	MarshalJSON()方法将该数据结构生成 JSON 格式的文本
	c.如果转化前的数据结构中出现指针，那么将会转化指针所指向的值，如果指针指向的是零值，
	那么null将作为转化后的结果输出
	d.字符串将以UTF-8编码转化输出为Unicode字符集的字符串
	e.数组和切片会转化为JSON里边的数组，但[]byte类型的值将会被转化为Base64编码后的字符串，
	slice类型的零值会被转化为 null。
	f.结构体会转化为JSON对象，并且只有结构体里边以大写字母开头的可被导出的字段才会被转化输出，
	而这些可导出的字段会作为JSON对象的字符串索引。
	g.转化一个map类型的数据结构时，该数据的类型必须是 map[string]T（T可以是encoding/json 包支持的任意数据类型）

63.iota
a. iota随分组中常量定义的“行数”从0开始累加，而不是随其出现的次数，书中这个地方有问题。不论某行的常量是否赋值成iota，iota都会进行自增
b. 如果两个常量定义在同一行，并且都赋值成iota，则该两个常量的值是一样的，同时iota只自增一次；切记，iota的自增是和“行数”对应的

64.Go里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）.
这两个函数在定义时不能有任何的参数和返回值。虽然一个package里面可以写任意多个init函数，但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个package中每个文件只写一个init函数 -- 即一个文件可以有多个init()函数

65.for
	for { // Infinite loop
		block
	}
	for booleanExpression { // While loop
		block
	}
	for optionalPreStatement; booleanExpression; optionalPostStatement { ➊
		block
	}
	for index, char := range aString { // String per character iteration ➋
		block
	}
	for index := range aString { // String per character iteration ➌
		block // char, size := utf8.DecodeRuneInString(aString[index:])
	}
	for index, item := range anArrayOrSlice { // Array or slice iteration ➍
		block
	}
	for index := range anArrayOrSlice { // Array or slice iteration ➎
		block // item := anArrayOrSlice[index]
	}
	for key, value := range aMap { // Map iteration ➏
		block
	}
	for key := range aMap { // Map iteration ➐
		block // value := aMap[key]
	}
	for item := range aChannel { // Channel iteration
		block
	}

66.channel
	channel <- value // Blocking send
	<-channel // Receive and discard
	x := <-channel // Receive and store
	x, ok := <-channel // As above & check for channel closed & empty

67.method: A method expression is a function that must be passed a value of the method’s type as its first argument.
	func (part Part) String() string {
		return fmt.Sprintf("«%d %q»", part.Id, part.Name)
	}
	func (part Part) HasPrefix(prefix string) bool {
		return strings.HasPrefix(part.Name, prefix)
	}

	asStringV := Part.String		// Effective signature: func(Part) string
	sv := asStringV(part)
	hasPrefix := Part.HasPrefix		// Effective signature: func(Part, string) bool
	asStringP := (*Part).String		// Effective signature: func(*Part) string
	sp := asStringP(&part)

68.runtime.Caller(): returns information about the functions that have
	been called and not yet returned in the current goroutine. The int argument
	says how far (i.e., how many functions) back we want to look. An argument of
	0 looks at the current function (i.e., this function, shapes.caller()), and an argument
	of 1 looks at this function’s caller, and so on. We add the 1 so as to start
	from this function’s caller.

	func caller(steps int) string {
		name := "?"
		if pc, _, _, ok := runtime.Caller(steps + 1); ok {
			name = filepath.Base(runtime.FuncForPC(pc).Name())
		}
		return name
	}

69.
Syntax Description/result
append(s, ...) The slice it was given plus the new items at the end if the
slice’s capacity is sufficient; otherwise a new slice with the
original items plus the new items at the end (see §4.2.3,
156 ➤)
cap(x) The capacity of slice x or the channel buffer capacity of channel
x or the length of array (or the array pointed to by) x; see
also len() (see §4.2, 148 ➤)
close(ch) Closes channel ch (but not legal for receive-only channels). No
more data can be sent to the channel. Data can continue to be
received from the channel (e.g., any sent but not yet received
values), and when there are no more values in the channel,
receivers will get the channel data type’s zero value.
complex(r, i) A complex128 with the given r (real) and i (imaginary) parts,
both of type float64 (see §2.3.2.1, 70 ➤)
copy(dst, src)
copy(b, s)
Copies (possibly overlapping) items from the src slice into the
dst slice, truncating if there isn’t enough room; or copies s of
type string’s bytes to b of type []byte (see §4.2.3, 156 ➤ and
➤ 268)
delete(m, k) Deletes the item with key k from map m or safely does nothing
if there’s no such key (see §4.3, 164 ➤)
imag(cx) The imaginary part of cx of type complex128 as a float64 (see
§2.3.2.1, 70 ➤)
len(x) The length of slice x or the number of items queued in channel
x’s buffer or the length of array (or the array pointed to by) x or
the number of items in map x or the number of bytes in string
x; see also cap() (see §4.2.3, 156 ➤)
make(T)
make(T, n)
make(T, n, m)
A reference to a slice, map, or channel of type T. If n is given
this is a slice’s length and capacity, or a hint to a map of how
many items to expect, or a channel’s buffer size. For slices only,
n and m may be given to specify the length and capacity (see
150 ➤ for slices, 165 ➤ for maps, and Chapter 7 for channels).
new(T) A pointer to a value of type T (see §4.1, 140 ➤)
panic(x) Raises a catchable runtime exception with value x (see §5.5.1,
➤ 213)
real(cx) The real part of cx of type complex128 as a float64 (see §2.3.2.1,
70 ➤)
recover() Catches a runtime exception (see §5.5.1,➤ 213)

70.Arrays are created using the syntaxes:
[length]Type
[N]Type{value1, value2, …, valueN}
[…]Type{value1, value2, …, valueN}

71.nil只能赋值给指针、channel、func、interface、map或slice类型的变量

72.map键的类型必须是可比较的。go语言的spec中准确的定义了这个要求，简而言之，
可以比较的类型包括：布尔，数字，字符串，指针，消息channel，接口类型和任何包
含了以上类型的结构体和数组。不在此范围的类型包括切片，哈希表和函数；这些类
型不能使用 “==” 做比较，也不能被用来做哈希表的键值。

------------------------------------------------------------------------
坑

type Error struct {
	Code int
	Msg  string
}

func (e Error) Error() string {
	return fmt.Sprintf("code=%v, msg=%v\n", e.Code, e.Msg)
}

func err1() (int, error) {
	return 1, nil
}

func myErrNil() (int, *Error) {
	return 10, nil
}

func myErrNil2() (int, *Error) {
	return 12, nil
}

func testError() {
	x, e := err1()
	if e != nil {
		fmt.Println(x, "err1", e)
		return
	}

	n, e := myErrNil()
	if e != nil {
		fmt.Println(n, "myErrNil", e)
		return
	}

	n2, e := myErrNil2()
	if e != nil {
		fmt.Println(n2, "myErrNil2", e)
		return
	}

	fmt.Println("ok")
}

执行后输出: 10 myErrNil <nil>
e的类型不一致, 编译时没有检查处理, 执行时出意外

------------------------------------------------------------------------
swagger